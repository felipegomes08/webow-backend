generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TransactionType {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  label        String?
  transactions Transaction[]

  @@map("transaction_type")
}

model TransactionStatus {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  label       String
  Transaction Transaction[]

  @@map("transaction_status")
}

model MatchResult {
  id             String          @id @default(uuid()) @db.Uuid
  name           String
  label          String
  matches        Match[]
  rouletteValues RouletteValue[]

  @@map("match_result")
}

model Configuration {
  id        String  @id @default(uuid()) @db.Uuid
  pixel     String
  interface Json
  system    Json
  active    Boolean @default(true)

  @@map("configurations")
}

model RouletteValue {
  id            String      @id @default(uuid()) @db.Uuid
  matchResultId String      @map("match_result_id") @db.Uuid
  label         String
  value         Decimal
  matchResult   MatchResult @relation(fields: [matchResultId], references: [id])

  @@map("roulette_values")
}

model UserType {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  label String
  users User[]

  @@map("user_type")
}

model UserStatus {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  label String
  users User[]

  @@map("user_status")
}

model AccountType {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  label String
  users User[]

  @@map("account_type")
}

model User {
  id               String          @id @default(uuid()) @db.Uuid
  name             String?
  cpf              String          @db.VarChar(11)
  phone            String
  email            String?
  uf               String?         @db.VarChar(2)
  pixKey           String?         @map("pix_key")
  password         String
  affiliateId      String?         @map("affiliate_id") @db.Uuid
  accountTypeId    String          @map("account_type_id") @db.Uuid
  userTypeId       String          @map("user_type_id") @db.Uuid
  balance          Decimal         @default(0.00) @db.Decimal(18, 2)
  statusId         String          @map("status_id") @db.Uuid
  createdAt        DateTime        @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  affiliate        Affiliate?      @relation("UserToAffiliate", fields: [affiliateId], references: [id])
  accountType      AccountType     @relation(fields: [accountTypeId], references: [id])
  userType         UserType        @relation(fields: [userTypeId], references: [id])
  status           UserStatus      @relation(fields: [statusId], references: [id])
  affiliates       Affiliate[]     @relation("AffiliateToUser")
  transactions     Transaction[]
  matches          Match[]
  RefreshToken     RefreshToken[]
  Ticket           Ticket[]        @relation("TicketUser")
  TicketUserSuport Ticket[]        @relation("TicketUserSupport")
  ticketMessages   TicketMessage[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime @map("expires_at")
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("refresh_tokens")
}

model Affiliate {
  id                String             @id @default(uuid()) @db.Uuid
  code              String
  userId            String             @map("user_id") @db.Uuid
  link              String
  balance           Decimal            @default(0.00) @db.Decimal(18, 2)
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  active            Boolean            @default(true)
  user              User               @relation("AffiliateToUser", fields: [userId], references: [id])
  referredUsers     User[]             @relation("UserToAffiliate")
  affiliatePayments AffiliatePayment[]
  affiliateEarnings AffiliateEarning[]

  @@map("affiliates")
}

model Transaction {
  id        String            @id @default(uuid()) @db.Uuid
  userId    String            @map("user_id") @db.Uuid
  typeId    String            @map("transaction_type_id") @db.Uuid
  statusId  String            @map("status_id") @db.Uuid
  pixKey    String            @map("pix_key")
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime          @updatedAt @map("updated_at") @db.Timestamp()
  amount    Decimal           @db.Decimal(18, 2)
  user      User              @relation(fields: [userId], references: [id])
  type      TransactionType   @relation(fields: [typeId], references: [id])
  status    TransactionStatus @relation(fields: [statusId], references: [id])

  @@map("transactions")
}

model Match {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String      @map("user_id") @db.Uuid
  matchResultId String      @map("match_result_id") @db.Uuid
  amount        Decimal     @db.Decimal(18, 2)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp()
  user          User        @relation(fields: [userId], references: [id])
  matchResult   MatchResult @relation(fields: [matchResultId], references: [id])

  @@map("matches")
}

model AffiliatePayment {
  id          String    @id @default(uuid()) @db.Uuid
  amount      Decimal   @db.Decimal(18, 2)
  affiliateId String    @map("affiliate_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp()
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  @@map("affiliate_payments")
}

model AffiliateEarning {
  id          String    @id @default(uuid()) @db.Uuid
  amount      Decimal   @db.Decimal(18, 2)
  percentage  Decimal
  action      String
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp()
  affiliateId String    @map("affiliate_id") @db.Uuid
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  @@map("affiliate_earnings")
}

model Ticket {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  supportId String   @map("support_id") @db.Uuid
  subject   String
  createdAt DateTime @default(now()) @map("created_at")
  closedAt  DateTime @map("closed_at")
  user      User     @relation("TicketUser", fields: [userId], references: [id])
  support   User     @relation("TicketUserSupport", fields: [supportId], references: [id])

  ticketMessages TicketMessage[]

  @@map("tickets")
}

model TicketMessage {
  id        String   @id @default(uuid()) @db.Uuid
  ticketId  String   @map("ticket_id") @db.Uuid
  senderId  String   @map("sender_id") @db.Uuid
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])

  @@map("ticket_messages")
}
