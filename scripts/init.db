BEGIN;
CREATE TABLE IF NOT EXISTS public.transaction_type
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying NOT NULL,
    label character varying,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.request_status
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying NOT NULL,
    label character varying NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.match_result
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying NOT NULL,
    label character varying NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.configurations
(
    pixel text NOT NULL,
    interface text NOT NULL,
    system text NOT NULL,
    active boolean NOT NULL DEFAULT true
);

CREATE TABLE IF NOT EXISTS public.roulette_values
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    match_result_id uuid NOT NULL,
    label character varying NOT NULL,
    value numeric NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_type
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying NOT NULL,
    label character varying NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_status
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying NOT NULL,
    label character varying NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.account_type
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying NOT NULL,
    label character varying NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying NOT NULL,
    cpf character varying(11) NOT NULL,
    phone character varying NOT NULL,
    email character varying NOT NULL,
    uf character varying(2) NOT NULL,
    pix_key character varying NOT NULL,
    password character varying NOT NULL,
    affiliate_id uuid,
    account_type_id uuid NOT NULL,
    user_type_id uuid NOT NULL,
    balance numeric(18, 2) NOT NULL DEFAULT 0.00,
    status_id uuid NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.affiliates
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    code character varying NOT NULL,
    user_id uuid NOT NULL,
    link character varying NOT NULL,
    balance numeric(18, 2) NOT NULL DEFAULT 0.00,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    active boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.transactions
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    transaction_type_id uuid NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    amount numeric(18, 2) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.transaction_requests
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    transaction_type_id uuid NOT NULL,
    status_id uuid NOT NULL,
    amount numeric(18, 2) NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.matches
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    match_result_id uuid NOT NULL,
    amount numeric(18, 2) NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.affiliate_payments
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    amount numeric(18, 2) NOT NULL,
    affiliate_id uuid NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.affiliate_earnings
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    amount numeric(18, 2) NOT NULL,
    percentage numeric NOT NULL,
    affiliate_action character varying NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    affiliate_id uuid NOT NULL,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.roulette_values
    ADD CONSTRAINT match_result_id_ref FOREIGN KEY (match_result_id)
    REFERENCES public.match_result (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT account_type_ref FOREIGN KEY (account_type_id)
    REFERENCES public.account_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT user_type_ref FOREIGN KEY (user_type_id)
    REFERENCES public.user_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT status_ref FOREIGN KEY (status_id)
    REFERENCES public.user_status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT affiliate_ref FOREIGN KEY (affiliate_id)
    REFERENCES public.affiliates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.affiliates
    ADD CONSTRAINT user_ref FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT user_ref FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transactions
    ADD CONSTRAINT transaction_type_ref FOREIGN KEY (transaction_type_id)
    REFERENCES public.transaction_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transaction_requests
    ADD CONSTRAINT request_user_ref FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transaction_requests
    ADD CONSTRAINT transaction_type_ref FOREIGN KEY (transaction_type_id)
    REFERENCES public.transaction_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transaction_requests
    ADD CONSTRAINT request_status_ref FOREIGN KEY (status_id)
    REFERENCES public.request_status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.matches
    ADD CONSTRAINT match_user_ref FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.matches
    ADD CONSTRAINT match_result_ref FOREIGN KEY (match_result_id)
    REFERENCES public.match_result (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.affiliate_payments
    ADD CONSTRAINT affiliate_ref FOREIGN KEY (affiliate_id)
    REFERENCES public.affiliates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.affiliate_earnings
    ADD CONSTRAINT affiliate_ref FOREIGN KEY (affiliate_id)
    REFERENCES public.affiliates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;

/* Create Indexes */
BEGIN;

CREATE INDEX idx_match_result_id ON public.roulette_values(match_result_id);

CREATE INDEX idx_account_type_id ON public.users(account_type_id);
CREATE INDEX idx_user_type_id ON public.users(user_type_id);
CREATE INDEX idx_status_id ON public.users(status_id);
CREATE INDEX idx_affiliate_id ON public.users(affiliate_id);
CREATE INDEX idx_email ON public.users(email);
CREATE INDEX idx_cpf ON public.users(cpf);

CREATE INDEX idx_user_id ON public.affiliates(user_id);
CREATE INDEX idx_code ON public.affiliates(code);

CREATE INDEX idx_user_id_transactions ON public.transactions(user_id);
CREATE INDEX idx_transaction_type_id ON public.transactions(transaction_type_id);

CREATE INDEX idx_user_id_transaction_requests ON public.transaction_requests(user_id);
CREATE INDEX idx_transaction_type_id_requests ON public.transaction_requests(transaction_type_id);
CREATE INDEX idx_status_id_requests ON public.transaction_requests(status_id);

CREATE INDEX idx_user_id_matches ON public.matches(user_id);
CREATE INDEX idx_match_result_id_matches ON public.matches(match_result_id);

CREATE INDEX idx_affiliate_id_payments ON public.affiliate_payments(affiliate_id);

CREATE INDEX idx_affiliate_id_earnings ON public.affiliate_earnings(affiliate_id);

CREATE INDEX idx_created_at_transactions ON public.transactions(created_at);
CREATE INDEX idx_created_at_transaction_requests ON public.transaction_requests(created_at);
CREATE INDEX idx_created_at_affiliate_payments ON public.affiliate_payments(created_at);
CREATE INDEX idx_created_at_affiliate_earnings ON public.affiliate_earnings(created_at);
CREATE INDEX idx_created_at_matches ON public.matches(created_at);

END;

/* insert Default Values */
BEGIN;

INSERT INTO transaction_type (name, label)
VALUES
(
	'deposit',
	'Depósito'
),
(
	'withdrawal',
	'Saque'
);

INSERT INTO request_status (name, label)
VALUES
(
	'pending',
	'Pendente'
),
(
	'approved',
	'Aprovado'
),
(
	'denied',
	'Negado'
);

INSERT INTO match_result (name, label)
VALUES
(
	'win',
	'Ganhou'
),
(
	'loss',
	'Perdeu'
);

INSERT INTO account_type (name, label)
VALUES
(
	'beginner',
	'Iniciante'
),
(
	'intermediary',
	'Intermediário'
),
(
	'advanced',
	'Avançado'
);

INSERT INTO user_status (name, label)
VALUES
(
	'active',
	'Ativo'
),
(
	'inactive',
	'Inativo'
),
(
	'banned',
	'Banido'
);

INSERT INTO user_type (name, label)
VALUES
(
	'administrator',
	'Administrador'
),
(
	'player',
	'Jogador'
),
(
	'affiliate',
	'Afiliado'
),
(
	'demo',
	'Demo'
);

END;